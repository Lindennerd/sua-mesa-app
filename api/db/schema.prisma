datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  name                String
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime         @default(now())
  RestaurantUser      RestaurantUser[]
  Order               Order[]
  OrderDelivery       OrderDelivery[]
}

enum UserRoles {
  OWNER
  EMPLOYEE
  CUSTOMER
}

model Restaurant {
  id             Int              @id @default(autoincrement())
  name           String
  slug           String           @unique
  address        String
  phone          String
  createdAt      DateTime         @default(now())
  RestaurantUser RestaurantUser[]
  MenuItem       MenuItem[]
  Order          Order[]
  Table          Table[]
}

model RestaurantUser {
  id           Int        @id @default(autoincrement())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  roles        UserRoles
  restaurantId Int
  userId       Int
  createdAt    DateTime   @default(now())
}

model Category {
  id        Int        @id @default(autoincrement())
  MenuItem  MenuItem[]
  createdAt DateTime   @default(now())
  name      String
}

model MenuItem {
  id           Int         @id @default(autoincrement())
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  createdAt    DateTime    @default(now())
  name         String
  image        String
  description  String
  price        Decimal
  OrderItem    OrderItem[]
}

model Order {
  id            Int             @id @default(autoincrement())
  customer      User            @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime        @default(now())
  status        OrderStatus
  restaurant    Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId  Int
  orderItems    OrderItem[]
  payed         Boolean         @default(false)
  table         Table           @relation(fields: [tableId], references: [id])
  tableId       Int
  OrderDelivery OrderDelivery[]
}

enum OrderStatus {
  ACTIVE
  CLOSED
}

model OrderItem {
  id         Int             @id @default(autoincrement())
  item       MenuItem        @relation(fields: [menuItemId], references: [id])
  order      Order           @relation(fields: [orderId], references: [id])
  menuItemId Int
  orderId    Int
  status     OrderItemStatus
}

enum OrderItemStatus {
  WAITING
  PREPARING
  DONE
  DELIVERED
}

model Table {
  id           Int        @id @default(autoincrement())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  Order        Order[]
}

model OrderDelivery {
  id       Int    @id @default(autoincrement())
  addres   String
  phone    String
  order    Order  @relation(fields: [orderId], references: [id])
  customer User   @relation(fields: [userId], references: [id])
  orderId  Int
  userId   Int
}
