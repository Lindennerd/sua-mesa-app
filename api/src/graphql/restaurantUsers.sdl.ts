export const schema = gql`
  """
  Representation of RestaurantUser.
  """
  type RestaurantUser {
    "Description for id."
    id: Int!

    "Description for restaurant."
    restaurant: Restaurant!

    "Description for user."
    user: User!

    "Description for roles."
    roles: UserRoles!

    "Description for restaurantId."
    restaurantId: Int!

    "Description for userId."
    userId: Int!

    "Description for createdAt."
    createdAt: DateTime!
  }

  """
  Possible values for UserRoles
  """
  enum UserRoles {
    OWNER
    EMPLOYEE
    CUSTOMER
  }

  """
  About queries
  """
  type Query {
    "Fetch RestaurantUsers."
    restaurantUsers: [RestaurantUser!]! @requireAuth

    "Fetch a RestaurantUser by id."
    restaurantUser(id: Int!): RestaurantUser @requireAuth
  }

  """
  Autogenerated input type of InputRestaurantUser.
  """
  input CreateRestaurantUserInput {
    "Description for roles."
    roles: UserRoles!

    "Description for restaurantId."
    restaurantId: Int!

    "Description for userId."
    userId: Int!
  }

  """
  Autogenerated input type of UpdateRestaurantUser.
  """
  input UpdateRestaurantUserInput {
    "Description for roles."
    roles: UserRoles

    "Description for restaurantId."
    restaurantId: Int

    "Description for userId."
    userId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new RestaurantUser."
    createRestaurantUser(input: CreateRestaurantUserInput!): RestaurantUser!
      @requireAuth

    "Updates an existing RestaurantUser."
    updateRestaurantUser(
      id: Int!
      input: UpdateRestaurantUserInput!
    ): RestaurantUser! @requireAuth

    "Deletes an existing RestaurantUser."
    deleteRestaurantUser(id: Int!): RestaurantUser! @requireAuth
  }
`
