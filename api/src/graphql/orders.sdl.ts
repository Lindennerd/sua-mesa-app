export const schema = gql`
  """
  Representation of Order.
  """
  type Order {
    "Description for id."
    id: Int!

    "Description for customer."
    customer: User!

    "Description for userId."
    userId: Int!

    "Description for createdAt."
    createdAt: DateTime!

    "Description for status."
    status: OrderStatus!

    "Description for restaurant."
    restaurant: Restaurant!

    "Description for restaurantId."
    restaurantId: Int!

    "Description for orderItems."
    orderItems: [OrderItem]!

    "Description for payed."
    payed: Boolean!

    "Description for table."
    table: Table!

    "Description for tableId."
    tableId: Int!

    "Description for OrderDelivery."
    OrderDelivery: [OrderDelivery]!
  }

  """
  Possible values for OrderStatus
  """
  enum OrderStatus {
    ACTIVE
    CLOSED
  }

  """
  About queries
  """
  type Query {
    "Fetch Orders."
    orders: [Order!]! @requireAuth

    "Fetch a Order by id."
    order(id: Int!): Order @requireAuth

    "Fetch Orders for a restaurant"
    restaurantOrders(restaurantId: Int!): [Order!]! @requireAuth

    "Fetch the customer orders"
    customerOrders(restaurantSlug: String!): [Order!] @requireAuth
  }

  """
  Autogenerated input type of InputOrder.
  """
  input CreateOrderInput {
    "Description for status."
    status: OrderStatus!

    "Description for restaurantId."
    restaurantId: Int!

    "Description for tableId."
    tableId: Int!

    "Description for OrderItems"
    orderItems: [CreateOrderItemInput]!
  }

  """
  Autogenerated input type of UpdateOrder.
  """
  input UpdateOrderInput {
    "Description for userId."
    userId: Int

    "Description for status."
    status: OrderStatus

    "Description for restaurantId."
    restaurantId: Int

    "Description for payed."
    payed: Boolean

    "Description for tableId."
    tableId: Int
  }

  """
  About mutations
  """
  type Mutation {
    "Creates a new Order."
    createOrder(input: CreateOrderInput!): Order! @requireAuth

    "Updates an existing Order."
    updateOrder(id: Int!, input: UpdateOrderInput!): Order! @requireAuth

    "Deletes an existing Order."
    deleteOrder(id: Int!): Order! @requireAuth
  }
`
